df$host_id <- as.character(df$host_id)
df$host_response_rate <- as.double(df$host_response_rate)
df$property_type <- as.factor(df$property_type)
df$host_id <- as.character(df$host_id)
df$host_response_rate <- as.double(df$host_response_rate)
df$property_type <- as.factor(df$property_type)
View(df)
filter(df, borough = "Brooklyn")
filter(df, borough == "Brooklyn")
# For loading data
install.packages("readr")
# For data manipulation (we'll spend most time with this one)
install.packages("dplyr")
# For visualization
install.packages("ggplot2")
# For string manipulation
install.packages("stringr")
install.packages("readr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("stringr")
# The code goes here
a <- 5 + 7
print(a)
# For loading data
install.packages("readr")
# For data manipulation (we'll spend most time with this one)
install.packages("dplyr")
# For visualization
install.packages("ggplot2")
# For string manipulation
install.packages("stringr")
library(readr)
library(dplyr)
library(ggplot2)
library(stringr)
df <- read_csv("airbnb_listings_newyork_smaller.csv")
glimpse(df)
df$host_id <- as.character(df$host_id)
df$host_response_rate <- as.double(df$host_response_rate)
df$property_type <- as.factor(df$property_type)
filter(df, borough == "Brooklyn")
df %>%
select(listi)
filter(df, borough == "Brooklyn")
df %>%
select(list)
filter(df, borough == "Brooklyn")
df %>%
select(listing_url)
length("unicorn")
length(5433)
sum(234, 54)
mean(234, 54, 3)
mean(234, 54, 3)
mean(c(234, 54, 3))
a_vector <- c(3, 5, 10)
print(a_vector)
df <- read_csv("airbnb_listings_newyork_smaller.csv")
df$host_response_rate
df$neighbourhood
df$cancellation_policy
library(lubridate)
glimpse(df)
df$host_id <- as.character(df$host_id)
df$host_response_rate <- as.double(df$host_response_rate)
df$property_type <- as.factor(df$property_type)
df$host_since <- mdy(df$host_since)
glimpse(df)
unique(df$calendar_updated)
setwd("C:/Users/mehedia/Box Sync/Tech_Workshops/Workshop_1_R_for_Beginners")
df
# The code goes here
a <- 5 + 7
print(a)
# For loading data
install.packages("readr")
# For data manipulation (we'll spend most time with this one)
install.packages("dplyr")
# For visualization
install.packages("ggplot2")
# For string manipulation
install.packages("stringr")
# To work with date and time
install.packages("lubridate")
library(readr)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate)
df <- read_csv("airbnb_newyork.csv")
glimpse(df)
foo <- 43
bar <- "kitten"
print(foo * 10)
vec <- c(3, 5, 10, 20)
print(vec)
add10 <-  function(num){
new_value <-  num + 10
return (new_value)
}
# Add 10 to 35
add10(35)
# First let's create a vector
vec2 <- c(23, 53, 11, 34, 87, 100, 5, 12, 66, 9, 87, 110, 20, 33, 54, 43, 76)
# Let's calculate the mean of the vector
calculated_mean <- mean(vec2)
# Then output it with some text description
message("The mean of the vector vec2 is ", mean(calculated_mean))
glimpse(df)
df$host_id <- as.character(df$host_id)
df$host_response_rate <- as.double(df$host_response_rate)
df$property_type <- as.factor(df$property_type)
df$host_since <- mdy(df$host_since)
df
filter(df, neighbourhood == "Chelsea")
filter(df, price > 5000)
# The code goes here
a <- 5 + 7
print(a)
# For loading data
install.packages("readr")
# For data manipulation (we'll spend most time with this one)
install.packages("dplyr")
# For visualization
install.packages("ggplot2")
# For string manipulation
install.packages("stringr")
# To work with date and time
install.packages("lubridate")
library(readr)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate)
df <- read_csv("airbnb_newyork.csv")
glimpse(df)
foo <- 43
bar <- "kitten"
print(foo * 10)
vec <- c(3, 5, 10, 20)
print(vec)
add10 <-  function(num){
new_value <-  num + 10
return (new_value)
}
# Add 10 to 35
add10(35)
# First let's create a vector
vec2 <- c(23, 53, 11, 34, 87, 100, 5, 12, 66, 9, 87, 110, 20, 33, 54, 43, 76)
# Let's calculate the mean of the vector
calculated_mean <- mean(vec2)
# Then output it with some text description
message("The mean of the vector vec2 is ", mean(calculated_mean))
glimpse(df)
df$host_id <- as.character(df$host_id)
df$host_response_rate <- as.double(df$host_response_rate)
df$property_type <- as.factor(df$property_type)
df$host_since <- mdy(df$host_since)
filter(df, neighbourhood == "Chelsea")
filter(df, price > 5000)
filter(df, borough == "Manhattan", price < 50)
filter(df, borough == "Manhattan", price < 20)
filter(df, price > 8000)
filter(df, cancellation_policy == "flexible" | accommodates > 2 )
filter(df, number_of_reviews != 0)
select(df, beds)
select(df, host_response_time, cancellation_policty)
select(df, host_response_time, cancellation_policy)
select(df, host_response_time, cancellation_policy, borough)
select(df, host_response_time, cancellation_policy, neighbourhood)
# For loading data
install.packages("readr")
# For data manipulation (we'll spend most time with this one)
install.packages("dplyr")
# For visualization
install.packages("ggplot2")
# For string manipulation
install.packages("stringr")
# To work with date and time
install.packages("lubridate")
install.packages("readr")
install.packages("ggplot2")
library(readr)
install.packages("readr")
library(readr)
library(readr)
library(dplyr)
install.packages("dplyr")
install.packages("stringr")
install.packages("lubridate")
library(readr)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate)
distinct(df$host_id)
?distinct
summary(df)
str(df)
glimpse(df)
summary(df)
select(df, listing_url)
select(df, 2:4)
select(df, -host_since)
select(df, -c(host_since, host_id))
select(df, -1:5)
select(df, -(1:5))
select(df, (5:))
select(df, 5:-1)
select(df, (5:-1))
df_midtown <- filter(df, neighbourhood == "Midtown")
df_expensive <- filter(df, price > 8000)
select(df_expensive, price, property_type, neighbourhood)
select(df_expensive, price, neighbourhood, description)
select(df_expensive, price, neighbourhood, description, listing_url)
df %>%
filter(price > 8000) %>%
select(price, neighbourhood, description, listing_url)
df %>% select(description)
df %>%
filter(price > 8000) %>%
select(price, neighbourhood, listing_url) %>%
arrange(price)
df %>%
filter(price > 8000) %>%
select(price, neighbourhood, listing_url) %>%
arrange(desc(price))
df %>%
filter(price > 8000) %>%
select(price, neighbourhood, listing_url) %>%
arrange(desc(price), neighbourhood)
df %>%
filter(price > 8000) %>%
select(price, neighbourhood, listing_url) %>%
arrange(desc(price), desc(neighbourhood))
View(df_expensive)
View(df_expensive)
mutate(df, price_per_person = price / accommodates)
glimse(df[[3:5]])
glimse(df)
glimpse(df)
df %>%
summarise(total_accom = sum(accommodates))
df %>%
summazise(total_accommodates = sum(accommodates))
df %>%
summarize(total_accommodates = sum(accommodates))
df %>%
summarize(total_accommodates = sum(review_scores_accuracy))
df %>%
summarize(total_accommodates = sum(accommodates))
df %>%
summarize(total_accommodates = sum(accommodates))
summarise(df, min(host_since))
summarise(df, min(host_since, na.rm = TRUE))
NA + 5
NA / 33 + 200
summarize(df, mean(review_scores_accuracy))
summarize(df, mean_accuracy = mean(review_scores_accuracy))
summarize(df, mean_accuracy = mean(review_scores_accuracy, na.rm = TRUE))
NA / 33
summarise(df, today() - min(host_since, na.rm = TRUE))
summarize(df, mean_accuracy = quantile(review_scores_accuracy))
summarize(df, mean_accuracy = quantile(review_scores_accuracy, na.rm = TRUE))
summarize(df, quantile(review_scores_accuracy, na.rm = TRUE))
summarize(df, mean_accuracy = mean(review_scores_accuracy, na.rm = TRUE))
summarise(df, first(host_since, na.rm = TRUE))
summarise(df, range(host_since, na.rm = TRUE))
summarize(df, min(review_scores_value), max(review_scores_value))
summarize(df, min(review_scores_value, na.rm = TRUE), max(review_scores_value, na.rm = TRUE))
summarize(df, min_score_value = min(review_scores_value, na.rm = TRUE),
max_score_value = max(review_scores_value, na.rm = TRUE))
df %>%
group_by(borough) %>%
summarize(mean(price), median(price))
df %>%
group_by(neighbourhood) %>%
summarize(n())
df %>%
group_by(neighbourhood) %>%
summarize(count = n()) %>%
arrange(desc(count))
df %>%
group_by(neighbourhood) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
top_n(10)
df %>%
distinct(zip_code) %>%
summarize(n())
df(n())
n(df)
df %>%
summarize(n())
df %>%
summarize(count = n())
df %>%
group_by(zip_code) %>%
summarize(max(price))
df %>%
group_by(zip_code) %>%
summarize(max_price = max(price)) %>%
arrange(desc(max_price))
df %>%
group_by(zip_code) %>%
summarize(max_price = mean(price)) %>%
arrange(desc(max_price))
df %>%
group_by(zip_code) %>%
summarize(mean_price = mean(price)) %>%
arrange(desc(mean_price))
df %>%
filter(borough == "Manhattan") %>%
group_by(zip_code) %>%
summarize(mean_price = mean(price)) %>%
arrange(desc(mean_price))
df %>%
filter(borough == "Manhattan") %>%
group_by(neighbourhood) %>%
summarize(mean_price = mean(price)) %>%
arrange(desc(mean_price))
df %>%
filter(Borough == Brooklyn) %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(median_price = median(price), count = n()) %>%
filter(count >= 50) %>%
arrange(desc(medain_price))
# The code goes here
a <- 5 + 7
print(a)
# For loading data
install.packages("readr")
# For data manipulation (we'll spend most time with this one)
install.packages("dplyr")
# For visualization
install.packages("ggplot2")
# For string manipulation
install.packages("stringr")
# To work with date and time
install.packages("lubridate")
library(readr)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate)
df <- read_csv("airbnb_newyork.csv")
glimpse(df)
foo <- 43
bar <- "kitten"
print(foo * 10)
vec <- c(3, 5, 10, 20)
print(vec)
add10 <-  function(num){
new_value <-  num + 10
return (new_value)
}
# Add 10 to 35
add10(35)
# First let's create a vector
vec2 <- c(23, 53, 11, 34, 87, 100, 5, 12, 66, 9, 87, 110, 20, 33, 54, 43, 76)
# Let's calculate the mean of the vector
calculated_mean <- mean(vec2)
# Then output it with some text description
message("The mean of the vector vec2 is ", calculated_mean)
glimpse(df)
df$host_id <- as.character(df$host_id)
df$host_response_rate <- as.double(df$host_response_rate)
df$property_type <- as.factor(df$property_type)
df$host_since <- mdy(df$host_since)
summary(df)
filter(df, neighbourhood == "Chelsea")
filter(df, price > 8000)
filter(df, borough == "Manhattan", price < 20)
filter(df, cancellation_policy == "flexible" | accommodates > 2 )
filter(df, number_of_reviews != 0)
select(df, listing_url)
select(df, host_response_time, cancellation_policy, neighbourhood)
select(df, 2:4)
df_expensive <- filter(df, price > 8000)
select(df_expensive, price, neighbourhood, listing_url)
df %>%
filter(price > 8000) %>%
select(price, neighbourhood, listing_url)
filter(df, price > 8000)
df %>% filter(price > 8000)
select(df, price, review_scores_rating, listing_url)
df %>% select(price, review_scores_rating, listing_url)
df %>%
filter(price > 8000) %>%
select(price, review_scores_rating, listing_url)
df %>%
filter(price > 8000) %>%
select(price, review_scores_rating, listing_url) %>%
arrange(price)
df %>%
filter(price > 8000) %>%
select(price, review_scores_rating, listing_url) %>%
arrange(desc(price))
df %>%
filter(price > 8000) %>%
select(price, neighbourhood, listing_url) %>%
arrange(desc(price), neighbourhood)
mutate(df, price_per_person = price / accommodates)
summarize(df, total_accommodates = sum(accommodates))
summarize(df, mean_accuracy = mean(review_scores_accuracy))
5 + NA
NA / 33
summarize(df, mean_accuracy = mean(review_scores_accuracy, na.rm = TRUE))
summarize(df, min_score_value = min(review_scores_value, na.rm = TRUE),
max_score_value = max(review_scores_value, na.rm = TRUE))
df %>%
summarize(count = n())
df %>%
group_by(borough) %>%
summarize(mean(price), median(price))
df %>%
group_by(neighbourhood) %>%
summarize(count = n()) %>%
arrange(desc(count)) %>%
top_n(10)
df %>%
filter(borough == "Manhattan") %>%
group_by(neighbourhood) %>%
summarize(mean_price = mean(price)) %>%
arrange(desc(mean_price))
df %>%
filter(Borough == Brooklyn) %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(median_price = median(price), count = n()) %>%
filter(count >= 50) %>%
arrange(desc(medain_price))
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(median_price = median(price), count = n()) %>%
filter(count >= 50) %>%
arrange(desc(medain_price))
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(median(price), count = n()) %>%
filter(count >= 50) %>%
arrange(desc(medain_price))
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9)
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(median_price = median(price), count = n()) %>%
filter(count >= 50) %>%
arrange(desc(medain_price))
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood)
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(count = n()) %>%
filter(count >= 50) %>%
arrange(desc(medain_price))
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(median_price = median(price), count = n()) %>%
filter(count >= 50) %>%
arrange(desc(median_price))
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(median_price = median(price), count = n()) %>%
filter(count >= 100) %>%
arrange(desc(median_price))
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(median_price = median(price), count = n()) %>%
filter(count >= 100) %>%
arrange(desc(median_price)) %>%
ggplot() + geom_scatter(aes(median_price, count))
df %>%
filter(borough == "Brooklyn") %>%
filter(review_scores_value >= 9) %>%
group_by(neighbourhood) %>%
summarize(median_price = median(price), count = n()) %>%
filter(count >= 100) %>%
arrange(desc(median_price)) %>%
ggplot() + geom_point(aes(median_price, count))
df %>%
group_by(borough, neighbourhood) %>%
summarize(count = n()) %>%
top_n(1)
df %>%
group_by(borough, neighbourhood) %>%
summarize(count = n()) %>%
top_n(2)
df %>%
group_by(borough, neighbourhood) %>%
summarize(count = n()) %>%
top_n(2) %>%
arrange(desc(count))
